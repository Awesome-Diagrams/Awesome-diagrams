diff a/frontend/app/internal/svg/svgShape/shapes/UseCaseShape.ts b/frontend/app/internal/svg/svgShape/shapes/UseCaseShape.ts	(rejected hunks)
@@ -32,29 +34,54 @@ export class UseCaseShape {
 
         this.selectionOutline = new Rect()
             .width((this.shape.width() as number) + this.selRectGapSize)
-            .height((this.shape.height() as number)  + this.selRectGapSize)
+            .height((this.shape.height() as number) + this.selRectGapSize)
             .stroke({ color: 'gray', width: 1, dasharray: '4,4' })
             .fill('none')
             .hide();
         this.group.add(this.selectionOutline);
 
         svg.add(this.group);
-        this.movable = new ConstraintMovable(this.group, constraint, this.selRectGapSize);
-        this.setDraggable(new GeneralDraggable());
+        this.movable = new MultiMovable(constraint, this.selRectGapSize);
+        this.setDraggable(new DeltaDraggable());
 
         this.updateTextAndRectPosition();
 
         this.rect.on('click', () => this.startEditing());
-        this.shape.on('click', () => this.toggleSelection())
+        this.shape.on('click', (e) => this.toggleSelection(e as MouseEvent));
+
+        this.addDeselectHandler(svg);
     }
 
-    private toggleSelection() {
-        if (!this.selectionOutline?.visible()) {
-            this.selectionOutline?.show();
-            this.draggable?.setDraggable(true); 
+    public getX(): number {
+        return this.group.x() as number;
+    }
 
-            document.addEventListener('click', this.handleDocumentClick);
+    public getY(): number {
+        return this.group.y() as number;
+    }
+
+    private toggleSelection(event: MouseEvent) {
+        event.stopPropagation();
+
+        if (event.shiftKey) {
+            if (this.isSelected) {
+                this.deselect();
+                const index = selectedShapes.indexOf(this);
+                if (index > -1) selectedShapes.splice(index, 1);
+            } else {
+                this.select();
+                selectedShapes.push(this);
+            }
+        } else {
+            // Сбрасываем выделение остальных фигур
+            selectedShapes.forEach((shape) => shape.deselect());
+            selectedShapes.length = 0;
+
+            this.select();
+            selectedShapes.push(this);
         }
+
+        console.log('Selected shapes:', selectedShapes.length);
     }
 
     private handleDocumentClick = (event: MouseEvent) => {
